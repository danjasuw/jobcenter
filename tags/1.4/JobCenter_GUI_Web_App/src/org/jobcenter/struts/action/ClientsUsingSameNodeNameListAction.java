/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.jobcenter.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.jobcenter.constants.ClientStatusUpdateTypeEnum;
import org.jobcenter.constants.GUIWebAppConstants;
import org.jobcenter.guiclient.GUIConnectionToServerClient;
import org.jobcenter.nondbdto.ClientConnectedDTO;
import org.jobcenter.nondbdto.ClientIdentifierDTO;
import org.jobcenter.struts.BaseAction;

/** 
 * MyEclipse Struts
 * Creation date: 02-15-2012
 * 
 * XDoclet definition:
 * @struts.action
 */
public class ClientsUsingSameNodeNameListAction extends BaseAction {

	private static Logger log = Logger.getLogger(ClientsUsingSameNodeNameListAction.class);

	/**
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		GUIConnectionToServerClient connToServer = null;

		try {

			connToServer = new GUIConnectionToServerClient();

			connToServer.init( GUIWebAppConstants.URL_TO_SERVER );

			List<ClientConnectedDTO> clientsConnectedList = connToServer.retrieveClientsUsingSameNodeNameList();
			
			int newSize = 0;
			
			if ( clientsConnectedList != null ) {
				
				newSize = clientsConnectedList.size();
			}
			
			List<DisplayClass> clientsConnectedListDisplay = new ArrayList<DisplayClass>( newSize );
			
			if ( clientsConnectedList != null ) {

				for ( ClientConnectedDTO entry : clientsConnectedList ) {

					DisplayClass displayEntry = new DisplayClass();

					displayEntry.setClientIdentifierDTO( entry.getClientIdentifierDTO() );
					displayEntry.setNodeName( entry.getNodeName() );
					displayEntry.setRemoteIPAddress( entry.getRemoteIPAddress() );
					displayEntry.setClientStatus( entry.getClientStatus() );

					Date startTime = new Date( entry.getStartTime() );

					Date lastStatusUpdatedTime = new Date( entry.getLastStatusUpdatedTime() );

					Date nextExpectedStatusUpdatedTime = new Date( entry.getNextExpectedStatusUpdatedTime() );

					displayEntry.setStartTime( startTime );
					displayEntry.setLastStatusUpdatedTime( lastStatusUpdatedTime );
					displayEntry.setNextExpectedStatusUpdatedTime( nextExpectedStatusUpdatedTime );

					clientsConnectedListDisplay.add( displayEntry );
				}

			}
			
			
			

			request.setAttribute("results", clientsConnectedListDisplay );



		} catch (Throwable ex) {

			log.error( " Exception: " + ex.getMessage(), ex );

			ActionErrors errors = new ActionErrors();
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.system"));
			saveMessages(request, errors);

		} finally {

			if ( connToServer != null ) {

				try {

					connToServer.destroy();

				} catch (Throwable ex) {

					log.error( " Exception calling connToServer.destroy(): " + ex.getMessage(), ex );
				}
			}
		}


		String forwardTo = "success";

		ActionForward actionForward = getActionForward( forwardTo, mapping );


		return actionForward;
	}
	
	/**
	 * class for conversion of the data to displayable values
	 *
	 */
	public class DisplayClass {
		
		private ClientIdentifierDTO clientIdentifierDTO;

		private String nodeName;

		private ClientStatusUpdateTypeEnum clientStatus;

		private String remoteIPAddress;

		private Date startTime;

		private Date lastStatusUpdatedTime;

		private Date nextExpectedStatusUpdatedTime;
		

		public ClientIdentifierDTO getClientIdentifierDTO() {
			return clientIdentifierDTO;
		}

		public void setClientIdentifierDTO(ClientIdentifierDTO clientIdentifierDTO) {
			this.clientIdentifierDTO = clientIdentifierDTO;
		}

		public String getNodeName() {
			return nodeName;
		}

		public void setNodeName(String nodeName) {
			this.nodeName = nodeName;
		}

		public ClientStatusUpdateTypeEnum getClientStatus() {
			return clientStatus;
		}

		public void setClientStatus(ClientStatusUpdateTypeEnum clientStatus) {
			this.clientStatus = clientStatus;
		}

		public String getRemoteIPAddress() {
			return remoteIPAddress;
		}

		public void setRemoteIPAddress(String remoteIPAddress) {
			this.remoteIPAddress = remoteIPAddress;
		}

		public Date getStartTime() {
			return startTime;
		}

		public void setStartTime(Date startTime) {
			this.startTime = startTime;
		}

		public Date getLastStatusUpdatedTime() {
			return lastStatusUpdatedTime;
		}

		public void setLastStatusUpdatedTime(Date lastStatusUpdatedTime) {
			this.lastStatusUpdatedTime = lastStatusUpdatedTime;
		}

		public Date getNextExpectedStatusUpdatedTime() {
			return nextExpectedStatusUpdatedTime;
		}

		public void setNextExpectedStatusUpdatedTime(Date nextExpectedStatusUpdatedTime) {
			this.nextExpectedStatusUpdatedTime = nextExpectedStatusUpdatedTime;
		}

	}
}